# This test verifies that a geometry shader can redeclare just the
# gl_PerVertex input block, but still use members of the gl_PerVertex
# output block (whether or not those members were included in the
# redeclaration of the input block).

[require]
GLSL >= 1.50

[vertex shader]
in vec4 piglit_vertex;
out gl_PerVertex {
  vec4 gl_Position;
};

void main()
{
  gl_Position = piglit_vertex;
}

[geometry shader]
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in gl_PerVertex {
  vec4 gl_Position;
} gl_in[];

void main()
{
  for (int i = 0; i < 3; i++) {
    gl_Position = gl_in[i].gl_Position;
    gl_ClipDistance[0] = 1.0;
    EmitVertex();
  }
}

[fragment shader]
void main()
{
  if (gl_ClipDistance[0] == 1.0)
    gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
  else
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

[test]
# Since the fragment shader's gl_ClipDistance array is only defined
# for elements that have clipping enabled, we need to enable clip
# plane 0.  Fortunately the values we use for gl_ClipDistance are
# always positive, so no pixels are actually clipped.
enable GL_CLIP_PLANE0
clear color 0.0 0.0 0.0 0.0
clear
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
